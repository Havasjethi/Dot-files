set surround
set multiple-cursors
set commentary
set NERDTree
Plug 'machakann/vim-highlightedyank'

let g:highlightedyank_highlight_duration = "200"
let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"

set number
set relativenumber
" set smartindent
" set cursorline
" set linebreak

set ignorecase " Ignore case when searching
set smartcase  " When searching try to be smart about cases

set scrolloff=8

set clipboard+=unnamedplus

let mapleader = " "

set incsearch


" nmap <C-a> ggVGy<C-O><C-O>
" nmap R :%s/com.frontendart/${package}.${rootArtifactId}/g<enter>:%s/TemplateApplication/${appName}/g<enter>


imap <C-d> <esc>"yyy"yp
imap <C-v> <esc>pa

noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt

vmap p "_dP

" Plugins

Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'mattn/emmet-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

map ge <Action>(GotoNextError)
map gE <Action>(GotoPreviousError)
nnoremap gi :action GotoImplementation<CR>
nnoremap gd :action GotoDeclaration<CR>
nnoremap gp :action GotoSuperMethod<CR>
nnoremap gt :action GotoTest<CR>
" nnoremap gb :action Back<CR>
" nnoremap gf :action Forward<CR>

noremap <C-h> :action PreviousTab<CR>
noremap <C-l> :action NextTab<CR>
noremap <A-h> :action PreviousTab<CR>
noremap <A-l> :action NextTab<CR>
noremap <A-w> :action CloseContent<CR>

" nnoremap <C-o> :action Back<CR>
" nnoremap <C-i> :action Forward<CR>
" nnoremap <tab> :action Forward<CR>

noremap <leader>ff :action FindInPath<cr>

nnoremap <leader>u :action FindUsages<CR>
nnoremap <leader>h :action CallHierarchy<CR>
noremap <leader>n :NERDTreeFocus<CR>
noremap <leader>nf :NERDTreeFind<cr>

vnoremap <leader>re :action Replace<CR>
nnoremap <leader>re :action Replace<CR>
nnoremap <leader>ge :action Generate<CR>
noremap <leader>e :action GotoFile<CR>

noremap <leader>6 :action CommentByLineComment<CR>
noremap <leader>cc :action CommentByLineComment<CR>

noremap é :action ShowErrorDescription<cr>

" nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'
" nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'

i<C-d><esc>k<leader>cc

nmap <leader>sa ggVG

ion RunClass<cr>
nmap <leader>rd :action DebugClass<cr>

ion Togglemap í z
nmap <leader>zz :action ToggleZenMode<cr>

nmap Y y$

nmap ci( f(vi(c
nmap ci) f(vi(c
nmap ci[ f[vi[c
nmap ci] f[vi[c
nmap ci{ f{vi{c
nmap ci} f{vi{c

nmap di( F(vi(d
nmap di) f(vi(d
nmap di[ F[vi[d
nmap di] f[vi[d
nmap di{ F{vi{d
nmap di} f{vi{d

